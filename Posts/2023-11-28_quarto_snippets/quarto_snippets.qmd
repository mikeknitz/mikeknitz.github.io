---
title: "Quarto snippets"
author: "Michael Knitz"
date: "2023-11-28"
date-modified: "2023-11-29"
categories: [r, quarto]
---

```{r, include = FALSE}
loadNamespace("knitr")
knitr::opts_chunk$set(comment = "", fig.align = "center", message = FALSE,
    out.width = "80%", dpi = 150, results = "hold", fig.show = "hold",
    warning = FALSE)
```

I'm usually re-using the same old Quarto templates. These are syntax and patterns I like to reference.

## Single Quarto document template

These items, along with session info at the bottom of the document, are what I usually use for an analysis in a single notebook. One could ditch the single document workflow and instead use a `_quarto.yml` in the root of the project, but for speed and low complexity, I like keeping things self-contained when possible.

### Frontmatter

``` yaml
title: "Title"
subtitle: "Subtitle"
author: "Author"
date: "2023-11-28"
format:
    html:
        css: assets/custom.scss
        code-overflow: scroll
        code-tools: true
        embed-resources: true
        highlight-style: github
        standalone: true
        theme:
            light: lumen
        toc: true
        toc-expand: true
        toc-depth: 4
        toc-location: left
        toc-collapsed: false
        grid:
            sidebar-width: 500px
            body-width: 1000px
            margin-width: 500px
            gutter-width: 1.5rem
```


### CSS

``` scss
/*-- scss:rules --*/
// size of code font
pre>code.sourceCode {
    font-size: 1em;
}
```

### Knitr chunk defaults

Set as the first executable chunk of the document

``` r
#| include: false
loadNamespace("knitr")
knitr::opts_chunk$set(comment = "", fig.align = "center", message = FALSE,
    out.width = "80%", dpi = 150, results = "hold", fig.show = "hold",
    warning = FALSE)
```

### Libraries

Load libraries, load functions in their own environment, set a path for any output, set any constants for the analysis

``` r
#| code-fold: true
#| message: false

library(conflicted)
library(dplyr)
library(tibble)
library(stringr)
library(forcats)
library(readr)
library(tidyr)
library(readxl)
library(writexl)
library(purrr)
library(ggplot2)
library(ggnewscale)
library(ggpubr)
library(ggsignif)
library(RColorBrewer)
library(cowplot)
loadNamespace("fs")
library(Seurat)
library(lisi)
library(harmony)
library(clustree)

# ------------------------------------------------------------------------------

# Source functions, helpers
mk <- new.env()
source_files <- list.files("R", recursive = TRUE, full.names = TRUE)
invisible(lapply(as.list(source_files), \(x) sys.source(x, envir = mk)))

# Set path for this notebook
path_output <- fs::dir_create("output/02")

LOAD_FROM_CACHED <- TRUE
```

## Show external functions

- See [Source functions from an environment](../2023-11-29_functions_in_environment/functions_in_environment.qmd)
  
## Programmatically fill tabset panels

First, create a "panel-tabset". Something about setting a group can deal with issues of clashing names of the tabs among other tabsets, so I always set a random string.

``` quarto
::: {.panel-tabset group="XXX"}

<!-- markdown headings become tabs -->

:::
```

When using `results = "asis"` for an R chunk, it will output raw markdown, which makes adding images via markdown format easiest: `![]()`. There are some workarounds out there where you might actually programmatically add executable code chunks (which might render images themselves), but I find it easy to generate several images first, save them to a directory, and then iterate through those images and render them with markdown syntax:

E.g.,

```{r}
suppressPackageStartupMessages(library(ggplot2))
path_dir <- fs::dir_create("my_plots")
plots <- c("plot1", "plot2", "plot3")
purrr::walk(plots, \(plot) {
    p <- ggplot(mpg, aes(x = hwy)) + geom_density() + labs(title = plot)
    ggsave(fs::path(path_dir, paste0(plot, ".png")), p, "png",
        width = 4, height = 3, units = "in")
})
```

```{r, eval = FALSE}
# Chunk options
# ```{r, echo = FALSE, fig.align = "default", results = "asis"}
# Sometimes I've run into issues with fig.align = "center", which
    # I keep as a default, so I unset it just for this chunk

purrr::walk(plots, \(plot) {
    cat("##### ", plot, "\n\n") # Set heading level one below parent
    cat("![](", fs::path(path_dir, paste0(plot, ".png")), ")\n")
    cat("\n\n")
})
```

The images will take up the width of the body of the document. With markdown syntax, you can change the width of the images with something like `{width="600px"}`

::: {.panel-tabset group="XXX"}

```{r, echo = FALSE, fig.align = "default", results = "asis"}
# Chunk options
# ```{r, echo = FALSE, fig.align = "default", results = "asis"}
# Sometimes I've run into issues with fig.align = "center", which
    # I keep as a default, so I unset it just for this chunk

purrr::walk(plots, \(plot) {
    cat("##### ", plot, "\n\n") # Set heading level one below parent
    cat("![](", fs::path(path_dir, paste0(plot, ".png")), ")\n")
    cat("\n\n")
})
```

:::

## Grid layout large images

For single quarto documents with no left-sidebar, I usually place the table of contents on the left side with the frontmatter `toc-location: left`. I also have a page layout something like:

``` yaml
grid:
  sidebar-width: 500px
  body-width: 1000px
  margin-width: 500px
  gutter-width: 1.5rem
```

For larger images / plots, you can increase the space they take up, overflowing to the right, with some sort of `{.column}` section, e.g.

``` quarto
::: {.column-screen-inset-right}
:::
```

If they contain other sections marked by `:::`, increase the number of colons:

``` quarto
:::: {.column-screen-inset-right}

::: {.panel-tabset}
:::

::::
```


## Session Info

Here's how to display a collapsible section for the R session info:

html:

``` html
<details style="margin-bottom:10px;">
<summary style="color:black;">
Session info
</summary>
```

R chunk:

``` r
#| echo: false
print(sessioninfo::session_info())
```

html:

``` html
</details>
```

---------------------

<details style="margin-bottom:10px;">
<summary style="color:black;">
Session info
</summary>

```{r, echo = FALSE}
print(sessioninfo::session_info())
```

</details>
