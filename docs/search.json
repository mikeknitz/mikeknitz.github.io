[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Michael Knitz",
    "section": "",
    "text": "Here’s where I’ll be posting random things, mostly snippets of R code for learning and future reference."
  },
  {
    "objectID": "index.html#posts",
    "href": "index.html#posts",
    "title": "Michael Knitz",
    "section": "Posts",
    "text": "Posts"
  },
  {
    "objectID": "Posts/2023-11-30_repos_with_large_files/repos_with_large_files.html",
    "href": "Posts/2023-11-30_repos_with_large_files/repos_with_large_files.html",
    "title": "Repos with large files",
    "section": "",
    "text": "Large files can make git projects a pain. Documenting my evolving workflow here.\nFor easy projects with small files and non-sensitive data, things can be as easy as as setting up a repo, running git clone, and adding just a couple lines to .gitignore. When I want to use a different machine, cloning there is easy.\nWith large files, using something like Managing large files - GitHub Docs is an option, but I prefer to sync these files with OneDrive or iCloud or Dropbox. This also makes it easy to work with associated binary files like Powerpoints and Excel documents.\nThere is the option of literally syncing the entire repo, including the .git folder, but with thousands of files related to tracking, I’ve run into sync errors and endless sync times trying to do this. It’s not a great option.\nWhat I’ve settled with is keeping the local copy of the repo outside of OneDrive, and keeping any large or binary files inside OneDrive, which I symlink to. Then I use a tracked script setup.sh. Something like below. It adds a number of directories to .gitignore where I store large and/or binary files. The names of these directories make it easy to remember that they are untracked. They also show up visually distinct in the file explorer in VSCode so I can remember. Everything else can be tracked in git without a care.\nWhen setting up on a different machine, I also get the benefit of documenting which untracked files are necessary to run the code.\n#!/bin/bash\n\n# Initial setup ----------------------------------------------------------------\n\n# Create .gitignore\nif [ ! -f .gitignore ]; then\n  touch .gitignore\nfi\n\necho -e \"\n.DS_Store\n/.quarto/\n.quarto/\n\" &gt;&gt; .gitignore\n\n# Add untracked symlink directories to .gitignore\n# No trailing slash since these are files\n# Set git config core.symlinks false\n# Check git config --list\necho -e \"\n_main\nassets\ncache\ndata\noutput\nreports\n\" &gt;&gt; .gitignore\n\n# Symlink untracked directories ------------------------------------------------\n\n# For machine A, relative to home directory ~\nbase_path=\"path_to_synced_directory\"\n\n# Run ln\nln -s ~/\"${base_path}\"/_main .\nln -s ~/\"${base_path}\"/assets .\nln -s ~/\"${base_path}\"/cache .\nln -s ~/\"${base_path}\"/data .\nln -s ~/\"${base_path}\"/output .\nln -s ~/\"${base_path}\"/reports .",
    "crumbs": [
      "Misc",
      "Repos with large files"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_r_function_gene_to_name/gene_to_name.html",
    "href": "Posts/2023-11-28_r_function_gene_to_name/gene_to_name.html",
    "title": "gene_to_name.R",
    "section": "",
    "text": "A simple function that takes a single gene symbol and provides a single gene description, using the AnnotationDbi package.\n\n# Provide a single gene symbol and get a single gene name / description\n# Works for organism = \"human\" or \"mouse\"\n\n# Return an error if not 1:1 mapping from AnnotationDbi::select()\n# Return NA if no mapping found\n\n# TODO: vectorize this function and reduce calls to AnnotationDbi::select()\n\ngene_to_name &lt;- function(symbol, organism = \"human\") {\n\n    stopifnot(length(symbol) == 1)\n\n    # Choose database based on human or mouse ----------------------------------\n    if (organism == \"human\") {\n        stopifnot(requireNamespace(\"org.Hs.eg.db\"))\n        x &lt;- org.Hs.eg.db::org.Hs.eg.db\n    } else if (organism == \"mouse\") {\n        stopifnot(requireNamespace(\"org.Mm.eg.db\"))\n        x &lt;- org.Mm.eg.db::org.Mm.eg.db\n    }\n\n    # Call AnnotationDbi::select() ---------------------------------------------\n    anno &lt;- suppressMessages(try(\n        AnnotationDbi::select(\n            x = x, keys = symbol,\n            column = \"GENENAME\", keytype = \"SYMBOL\"\n        ),\n        silent = TRUE\n    ))\n\n    # Return NA if not found ---------------------------------------------------\n    if (any(class(anno) == \"try-error\")) return(NA) # seems fragile but it works\n\n    # Return gene name / description -------------------------------------------\n    # Throws error if not 1:1 mapping\n\n    if (length(anno$GENENAME) == 1) {\n        return(anno$GENENAME)\n    } else if (length(anno$GENENAME) &gt; 1) {\n        stop(paste(\"Mapping for\", symbol, \"not 1:1\"))\n    }\n\n}\n\n\ngene_to_name(\"CD8A\")\n\n[1] \"CD8a molecule\"\n\n\n\nc(\"CD3D\", \"IL6\", \"TNFRSF8\", \"CD45\", \"PTPRC\") |&gt;\n    lapply(\\(x) gene_to_name(x)) |&gt;\n    unlist() |&gt;\n    cat(sep = \"\\n\")\n\nCD3 delta subunit of T-cell receptor complex\ninterleukin 6\nTNF receptor superfamily member 8\nNA\nprotein tyrosine phosphatase receptor type C",
    "crumbs": [
      "R",
      "gene_to_name.R"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_barplots/barplots.html",
    "href": "Posts/2023-11-28_barplots/barplots.html",
    "title": "Barplots",
    "section": "",
    "text": "Barplots are not terribly straightforward. Here are some templates I reference from time to time.",
    "crumbs": [
      "R",
      "Barplots"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_barplots/barplots.html#libraries",
    "href": "Posts/2023-11-28_barplots/barplots.html#libraries",
    "title": "Barplots",
    "section": "Libraries",
    "text": "Libraries\n\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(ggnewscale)\nlibrary(cowplot)\nset.seed(12217)",
    "crumbs": [
      "R",
      "Barplots"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_barplots/barplots.html#functions-helpers",
    "href": "Posts/2023-11-28_barplots/barplots.html#functions-helpers",
    "title": "Barplots",
    "section": "Functions & Helpers",
    "text": "Functions & Helpers\n\n\nCode\nhex_opacity_to_opaque &lt;- function(hex, opacity) {\n    # hex = vector of hex codes\n    # opacity = decimal e.g. 0.65\n    # Returns hex codes equivalent in color to applying the opacity\n    # but they remain opaque\n    rgb_cols &lt;- grDevices::col2rgb(hex)\n    return_hex &lt;- character(length = length(hex))\n    for (i in seq_along(hex)) {\n        old_red &lt;- rgb_cols[1, i]\n        new_red &lt;- 255 - (opacity * (255 - old_red))\n        old_green &lt;- rgb_cols[2, i]\n        new_green &lt;- 255 - (opacity * (255 - old_green))\n        old_blue &lt;- rgb_cols[3, i]\n        new_blue &lt;- 255 - (opacity * (255 - old_blue))\n        return_hex[i] &lt;- rgb(new_red, new_green, new_blue, maxColorValue = 255)\n    }\n    return_hex\n}\n\nbar_theme &lt;- theme(\n    plot.title    = element_text(size = 14, hjust = 0),\n    plot.subtitle = element_text(size = 10, hjust = 0),\n    plot.caption  = element_text(size = 10, hjust = 0),\n    plot.caption.position  = \"panel\",\n    axis.title.x  = element_blank(),\n    axis.title.y  = element_text(size = 12),\n    axis.text.x = element_text(color = \"#252525\", size = 12, angle = 45, hjust = 1),\n    axis.text.y = element_text(color = \"#252525\", size = 10),\n    axis.ticks.x = element_blank(),\n    axis.line.y = element_line(),\n    axis.line.x = element_line(),\n    panel.grid.major.y = element_line(linewidth = 0.20, linetype = 1, color = \"black\"),\n    panel.grid.major.x = element_blank(),\n    panel.grid.minor = element_blank(),\n    panel.border = element_blank(),\n    panel.background = element_rect(fill = \"transparent\", color = NA),\n    plot.background  = element_rect(fill = \"transparent\", color = NA),\n    legend.position        = \"none\",\n    plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = \"in\")\n)",
    "crumbs": [
      "R",
      "Barplots"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_barplots/barplots.html#example-data",
    "href": "Posts/2023-11-28_barplots/barplots.html#example-data",
    "title": "Barplots",
    "section": "Example Data",
    "text": "Example Data\nExample data from ggplot2 package.\n\ndata &lt;- ggplot2::mpg\n\nOftentimes I’ll make some minor tweaks to a dataset in a disposable object called dp (“data plot”). For instance, here I’ll subset the manufacturer column to just a few brands. I can also do all sorts of changes without worrying about messing too much with a data object that might be used all over the place in an analysis.\nThis subsetting could also be done within a call to ggplot2::ggplot(), but I like to make it transparent all in one section or series of pipes.\n\ndp &lt;- data |&gt;\n    dplyr::filter(manufacturer %in% c(\"audi\", \"dodge\", \"ford\", \"honda\")) |&gt;\n    dplyr::mutate(manufacturer = factor(manufacturer)) |&gt;\n    dplyr::select(manufacturer, hwy)\n\nlapply(dp, \\(x) summary(x))\n\n$manufacturer\n audi dodge  ford honda \n   18    37    25     9 \n\n$hwy\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  12.00   17.00   21.00   21.54   25.00   36.00",
    "crumbs": [
      "R",
      "Barplots"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_barplots/barplots.html#barplot-with-dots-and-errorbars",
    "href": "Posts/2023-11-28_barplots/barplots.html#barplot-with-dots-and-errorbars",
    "title": "Barplots",
    "section": "Barplot with dots and errorbars",
    "text": "Barplot with dots and errorbars\nSince we are dealing with long data, we can use ggplot2::stat_summary() to compute the height of the bars (the means). Normally, geom_col() would take just the height of each bar, or geom_bar() might count the instances of each. Similarly, we can compute the errorbars with ggplot2::mean_se()\n\ncolors &lt;- c(\"#CC0B00\", \"#5D88DA\", \"#02AF66\", \"#02B5E2\")\n\np &lt;- ggplot(dp, aes(x = manufacturer, y = hwy)) +\n    stat_summary(aes(fill = manufacturer),\n        geom = \"col\", fun = mean, width = 0.85, color = \"black\") +\n    stat_summary(geom = \"errorbar\", fun.data = mean_se,\n        width = 0.5, linewidth = 0.5) +\n    geom_point(shape = 21, size = 2, fill = \"white\",\n        position = position_jitter(width = 0.35)) +\n    scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +\n    scale_fill_manual(values = colors) +\n    bar_theme +\n    labs(\n        title = \"Mileage by Manufacturer\",\n        subtitle = \"miles per gallon (mpg)\",\n        caption = \"Here is a caption.\"\n    )\n    \np\n\n\n\n\nThe white dots look okay. You could also color the dots by group, but I don’t really like the bars and dots being the exact same color.\n\n\nCode\ncowplot::plot_grid(\n    p + labs(title = \"White dots\", subtitle = NULL, caption = NULL),\n    ggplot(dp, aes(x = manufacturer, y = hwy)) +\n        stat_summary(aes(fill = manufacturer),\n            geom = \"col\", fun = mean, width = 0.85, color = \"black\") +\n        stat_summary(geom = \"errorbar\", fun.data = mean_se,\n            width = 0.5, linewidth = 0.5) +\n        geom_point(aes(fill = manufacturer), shape = 21, size = 2,\n            position = position_jitter(width = 0.35)) +\n        scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +\n        scale_fill_manual(values = colors) +\n        bar_theme +\n        labs(title = \"Colored dots\"),\n    nrow = 1\n)\n\n\n\n\n\nWhen you set the colors of a fill aesthetic using scale_fill_manual(), it sets the colors for all of the layers. You can use ggnewscale::new_scale_fill() to make different colors, allowing you to call scale_fill_manual() more than once.\nI like how things look when the bars are a bit lighter than the points. I like to set the colors once (just one palette to worry about), and then I use a function to lighten up all the colors. You could use something with alpha to change the opacity, but I don’t like how this makes the gridlines and anything else behind it come through. So I use a function defined above hex_opacity_to_opaque() which takes colors and returns non-transparent lightened versions of each color.\n\ncolors &lt;- c(\"#CC0B00\", \"#5D88DA\", \"#02AF66\", \"#02B5E2\")\n\nggplot(dp, aes(x = manufacturer, y = hwy)) +\n    stat_summary(aes(fill = manufacturer),\n        geom = \"col\", fun = mean, width = 0.85, color = \"black\") +\n    scale_fill_manual(values = hex_opacity_to_opaque(colors, 0.6)) +\n    new_scale_fill() +\n    stat_summary(geom = \"errorbar\", fun.data = mean_se,\n        width = 0.5, linewidth = 0.5) +\n    geom_point(aes(fill = manufacturer), shape = 21, size = 2,\n        position = position_jitter(width = 0.35)) +\n    scale_y_continuous(expand = expansion(mult = c(0, 0.15))) +\n    scale_fill_manual(values = colors) +\n    bar_theme +\n    labs(\n        title = \"Mileage by Manufacturer\",\n        subtitle = \"miles per gallon (mpg)\",\n        caption = \"Here is a caption.\"\n    )",
    "crumbs": [
      "R",
      "Barplots"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_barplots/barplots.html#using-dodge",
    "href": "Posts/2023-11-28_barplots/barplots.html#using-dodge",
    "title": "Barplots",
    "section": "Using “dodge”",
    "text": "Using “dodge”\nIn the above example, the fill aesthetic does not pose any problems for spacing and alignment, as each bar on the x-axis maps 1:1 with the colors given to each bar.\nWhen you set a fill aesthetic that is different from the x-axis categories, each bar will “dodge” into respective colors, in this instance.\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.3 (2023-03-15)\n os       macOS 14.1.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Denver\n date     2023-12-06\n pandoc   3.1.8 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.1   2023-03-23 [1] CRAN (R 4.2.0)\n colorspace    2.1-0   2023-01-23 [1] CRAN (R 4.2.0)\n cowplot     * 1.1.1   2020-12-30 [1] CRAN (R 4.2.0)\n digest        0.6.33  2023-07-07 [1] CRAN (R 4.2.0)\n dplyr       * 1.1.3   2023-09-03 [1] CRAN (R 4.2.0)\n evaluate      0.22    2023-09-29 [1] CRAN (R 4.2.3)\n fansi         1.0.5   2023-10-08 [1] CRAN (R 4.2.0)\n farver        2.1.1   2022-07-06 [1] CRAN (R 4.2.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.2.0)\n generics      0.1.3   2022-07-05 [1] CRAN (R 4.2.0)\n ggnewscale  * 0.4.9   2023-05-25 [1] CRAN (R 4.2.0)\n ggplot2     * 3.4.4   2023-10-12 [1] CRAN (R 4.2.0)\n glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.0)\n gtable        0.3.4   2023-08-21 [1] CRAN (R 4.2.0)\n htmltools     0.5.6.1 2023-10-06 [1] CRAN (R 4.2.0)\n htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.2.0)\n jsonlite      1.8.7   2023-06-29 [1] CRAN (R 4.2.0)\n knitr         1.44    2023-09-11 [1] CRAN (R 4.2.0)\n labeling      0.4.3   2023-08-29 [1] CRAN (R 4.2.0)\n lifecycle     1.0.3   2022-10-07 [1] CRAN (R 4.2.0)\n magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.0)\n munsell       0.5.0   2018-06-12 [1] CRAN (R 4.2.0)\n pillar        1.9.0   2023-03-22 [1] CRAN (R 4.2.0)\n pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.0)\n purrr         1.0.2   2023-08-10 [1] CRAN (R 4.2.0)\n R6            2.5.1   2021-08-19 [1] CRAN (R 4.2.0)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.2.0)\n rmarkdown     2.25    2023-09-18 [1] CRAN (R 4.2.0)\n rstudioapi    0.15.0  2023-07-07 [1] CRAN (R 4.2.0)\n scales        1.2.1   2022-08-20 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n tibble      * 3.2.1   2023-03-20 [1] CRAN (R 4.2.0)\n tidyr       * 1.3.0   2023-01-24 [1] CRAN (R 4.2.0)\n tidyselect    1.2.0   2022-10-10 [1] CRAN (R 4.2.0)\n utf8          1.2.4   2023-10-22 [1] CRAN (R 4.2.0)\n vctrs         0.6.4   2023-10-12 [1] CRAN (R 4.2.0)\n withr         2.5.1   2023-09-26 [1] CRAN (R 4.2.0)\n xfun          0.40    2023-08-09 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "R",
      "Barplots"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_R_data_structures/R_data_structures.html",
    "href": "Posts/2023-11-28_R_data_structures/R_data_structures.html",
    "title": "R data structures",
    "section": "",
    "text": "Data structures:",
    "crumbs": [
      "R",
      "R data structures"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_R_data_structures/R_data_structures.html#lists",
    "href": "Posts/2023-11-28_R_data_structures/R_data_structures.html#lists",
    "title": "R data structures",
    "section": "Lists",
    "text": "Lists\n\nCreate lists\n\nmy_list &lt;- list(a = 1, b = 2, c = c(\"a\", \"b\", \"c\"))\n\nmy_list\n\n$a\n[1] 1\n\n$b\n[1] 2\n\n$c\n[1] \"a\" \"b\" \"c\"\n\n\n\nmy_list &lt;- c(\"a\", \"b\", \"c\") |&gt;\n    as.list()\n\nmy_list\n\n[[1]]\n[1] \"a\"\n\n[[2]]\n[1] \"b\"\n\n[[3]]\n[1] \"c\"\n\n\n\nmy_list &lt;- c(\"name1\" = \"a\", \"name2\" = \"b\", \"name3\" = \"c\") |&gt;\n    as.list()\n\nmy_list\n\n$name1\n[1] \"a\"\n\n$name2\n[1] \"b\"\n\n$name3\n[1] \"c\"\n\n\n\n\nConcatenate lists\n\na &lt;- list(a = 1, b = 2, c = 3)\nb &lt;- list(d = 4, e = 5, f = 6)\n\nc &lt;- c(a, b)\nc\nstr(c)\nclass(c)\n\n$a\n[1] 1\n\n$b\n[1] 2\n\n$c\n[1] 3\n\n$d\n[1] 4\n\n$e\n[1] 5\n\n$f\n[1] 6\n\nList of 6\n $ a: num 1\n $ b: num 2\n $ c: num 3\n $ d: num 4\n $ e: num 5\n $ f: num 6\n[1] \"list\"\n\n\n\n\nSubsetting\nSubsetting with [] returns a list\n\na &lt;- list(a = 1, b = 2, c = 3)\na_sub1 &lt;- a[1:2]\na_sub1\n\n$a\n[1] 1\n\n$b\n[1] 2\n\n\n\na_sub2 &lt;- a[-2]\na_sub2\n\n$a\n[1] 1\n\n$c\n[1] 3\n\n\nSubsetting with [[]] for a single element returns the element, not an object of class “list”\n\none_item &lt;- a[[2]]\none_item\nclass(one_item)\n\n[1] 2\n[1] \"numeric\"",
    "crumbs": [
      "R",
      "R data structures"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html",
    "href": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html",
    "title": "Quarto snippets",
    "section": "",
    "text": "I’m usually re-using the same old Quarto templates. These are syntax and patterns I like to reference.",
    "crumbs": [
      "R",
      "Quarto snippets"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#single-quarto-document-template",
    "href": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#single-quarto-document-template",
    "title": "Quarto snippets",
    "section": "Single Quarto document template",
    "text": "Single Quarto document template\nThese items, along with session info at the bottom of the document, are what I usually use for an analysis in a single notebook. One could ditch the single document workflow and instead use a _quarto.yml in the root of the project, but for speed and low complexity, I like keeping things self-contained when possible.\n\nFrontmatter\ntitle: \"Title\"\nsubtitle: \"Subtitle\"\nauthor: \"Author\"\ndate: \"2023-11-28\"\nformat:\n    html:\n        css: assets/custom.scss\n        code-overflow: scroll\n        code-tools: true\n        embed-resources: true\n        highlight-style: github\n        standalone: true\n        theme:\n            light: lumen\n        toc: true\n        toc-expand: true\n        toc-depth: 4\n        toc-location: left\n        toc-collapsed: false\n        grid:\n            sidebar-width: 500px\n            body-width: 1000px\n            margin-width: 500px\n            gutter-width: 1.5rem\n\n\nCSS\n/*-- scss:rules --*/\n// size of code font\npre&gt;code.sourceCode {\n    font-size: 1em;\n}\n\n\nKnitr chunk defaults\nSet as the first executable chunk of the document\n#| include: false\nloadNamespace(\"knitr\")\nknitr::opts_chunk$set(comment = \"\", fig.align = \"center\", message = FALSE,\n    out.width = \"80%\", dpi = 150, results = \"hold\", fig.show = \"hold\",\n    warning = FALSE)\n\n\nLibraries\nLoad libraries, load functions in their own environment, set a path for any output, set any constants for the analysis\n#| code-fold: true\n#| message: false\n\nlibrary(conflicted)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(stringr)\nlibrary(forcats)\nlibrary(readr)\nlibrary(tidyr)\nlibrary(readxl)\nlibrary(writexl)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(ggnewscale)\nlibrary(ggpubr)\nlibrary(ggsignif)\nlibrary(RColorBrewer)\nlibrary(cowplot)\nloadNamespace(\"fs\")\nlibrary(Seurat)\nlibrary(lisi)\nlibrary(harmony)\nlibrary(clustree)\n\n# ------------------------------------------------------------------------------\n\n# Source functions, helpers\nmk &lt;- new.env()\nsource_files &lt;- list.files(\"R\", recursive = TRUE, full.names = TRUE)\ninvisible(lapply(as.list(source_files), \\(x) sys.source(x, envir = mk)))\n\n# Set path for this notebook\npath_output &lt;- fs::dir_create(\"output/02\")\n\nLOAD_FROM_CACHED &lt;- TRUE",
    "crumbs": [
      "R",
      "Quarto snippets"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#show-external-functions",
    "href": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#show-external-functions",
    "title": "Quarto snippets",
    "section": "Show external functions",
    "text": "Show external functions\n\nSee Source functions from an environment",
    "crumbs": [
      "R",
      "Quarto snippets"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#programmatically-fill-tabset-panels",
    "href": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#programmatically-fill-tabset-panels",
    "title": "Quarto snippets",
    "section": "Programmatically fill tabset panels",
    "text": "Programmatically fill tabset panels\nFirst, create a “panel-tabset”. Something about setting a group can deal with issues of clashing names of the tabs among other tabsets, so I always set a random string.\n::: {.panel-tabset group=\"XXX\"}\n\n&lt;!-- markdown headings become tabs --&gt;\n\n:::\nWhen using results = \"asis\" for an R chunk, it will output raw markdown, which makes adding images via markdown format easiest: ![](). There are some workarounds out there where you might actually programmatically add executable code chunks (which might render images themselves), but I find it easy to generate several images first, save them to a directory, and then iterate through those images and render them with markdown syntax:\nE.g.,\n\nsuppressPackageStartupMessages(library(ggplot2))\npath_dir &lt;- fs::dir_create(\"my_plots\")\nplots &lt;- c(\"plot1\", \"plot2\", \"plot3\")\npurrr::walk(plots, \\(plot) {\n    p &lt;- ggplot(mpg, aes(x = hwy)) + geom_density() + labs(title = plot)\n    ggsave(fs::path(path_dir, paste0(plot, \".png\")), p, \"png\",\n        width = 4, height = 3, units = \"in\")\n})\n\n\n# Chunk options\n# ```{r, echo = FALSE, fig.align = \"default\", results = \"asis\"}\n# Sometimes I've run into issues with fig.align = \"center\", which\n    # I keep as a default, so I unset it just for this chunk\n\npurrr::walk(plots, \\(plot) {\n    cat(\"##### \", plot, \"\\n\\n\") # Set heading level one below parent\n    cat(\"![](\", fs::path(path_dir, paste0(plot, \".png\")), \")\\n\")\n    cat(\"\\n\\n\")\n})\n\nThe images will take up the width of the body of the document. With markdown syntax, you can change the width of the images with something like {width=\"600px\"}\n\nplot1plot2plot3",
    "crumbs": [
      "R",
      "Quarto snippets"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#grid-layout-large-images",
    "href": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#grid-layout-large-images",
    "title": "Quarto snippets",
    "section": "Grid layout large images",
    "text": "Grid layout large images\nFor single quarto documents with no left-sidebar, I usually place the table of contents on the left side with the frontmatter toc-location: left. I also have a page layout something like:\ngrid:\n  sidebar-width: 500px\n  body-width: 1000px\n  margin-width: 500px\n  gutter-width: 1.5rem\nFor larger images / plots, you can increase the space they take up, overflowing to the right, with some sort of {.column} section, e.g.\n::: {.column-screen-inset-right}\n:::\nIf they contain other sections marked by :::, increase the number of colons:\n:::: {.column-screen-inset-right}\n\n::: {.panel-tabset}\n:::\n\n::::",
    "crumbs": [
      "R",
      "Quarto snippets"
    ]
  },
  {
    "objectID": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#session-info",
    "href": "Posts/2023-11-28_quarto_snippets/quarto_snippets.html#session-info",
    "title": "Quarto snippets",
    "section": "Session Info",
    "text": "Session Info\nHere’s how to display a collapsible section for the R session info:\nhtml:\n&lt;details style=\"margin-bottom:10px;\"&gt;\n&lt;summary style=\"color:black;\"&gt;\nSession info\n&lt;/summary&gt;\nR chunk:\n#| echo: false\nprint(sessioninfo::session_info())\nhtml:\n&lt;/details&gt;\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.3 (2023-03-15)\n os       macOS 14.1.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Denver\n date     2023-12-06\n pandoc   3.1.8 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n cli           3.6.1   2023-03-23 [1] CRAN (R 4.2.0)\n colorspace    2.1-0   2023-01-23 [1] CRAN (R 4.2.0)\n digest        0.6.33  2023-07-07 [1] CRAN (R 4.2.0)\n dplyr         1.1.3   2023-09-03 [1] CRAN (R 4.2.0)\n evaluate      0.22    2023-09-29 [1] CRAN (R 4.2.3)\n fansi         1.0.5   2023-10-08 [1] CRAN (R 4.2.0)\n farver        2.1.1   2022-07-06 [1] CRAN (R 4.2.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.2.0)\n fs            1.6.3   2023-07-20 [1] CRAN (R 4.2.0)\n generics      0.1.3   2022-07-05 [1] CRAN (R 4.2.0)\n ggplot2     * 3.4.4   2023-10-12 [1] CRAN (R 4.2.0)\n glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.0)\n gtable        0.3.4   2023-08-21 [1] CRAN (R 4.2.0)\n htmltools     0.5.6.1 2023-10-06 [1] CRAN (R 4.2.0)\n htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.2.0)\n jsonlite      1.8.7   2023-06-29 [1] CRAN (R 4.2.0)\n knitr         1.44    2023-09-11 [1] CRAN (R 4.2.0)\n labeling      0.4.3   2023-08-29 [1] CRAN (R 4.2.0)\n lifecycle     1.0.3   2022-10-07 [1] CRAN (R 4.2.0)\n magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.0)\n munsell       0.5.0   2018-06-12 [1] CRAN (R 4.2.0)\n pillar        1.9.0   2023-03-22 [1] CRAN (R 4.2.0)\n pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.0)\n purrr         1.0.2   2023-08-10 [1] CRAN (R 4.2.0)\n R6            2.5.1   2021-08-19 [1] CRAN (R 4.2.0)\n ragg          1.2.6   2023-10-10 [1] CRAN (R 4.2.0)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.2.0)\n rmarkdown     2.25    2023-09-18 [1] CRAN (R 4.2.0)\n rstudioapi    0.15.0  2023-07-07 [1] CRAN (R 4.2.0)\n scales        1.2.1   2022-08-20 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n systemfonts   1.0.5   2023-10-09 [1] CRAN (R 4.2.0)\n textshaping   0.3.7   2023-10-09 [1] CRAN (R 4.2.0)\n tibble        3.2.1   2023-03-20 [1] CRAN (R 4.2.0)\n tidyselect    1.2.0   2022-10-10 [1] CRAN (R 4.2.0)\n utf8          1.2.4   2023-10-22 [1] CRAN (R 4.2.0)\n vctrs         0.6.4   2023-10-12 [1] CRAN (R 4.2.0)\n withr         2.5.1   2023-09-26 [1] CRAN (R 4.2.0)\n xfun          0.40    2023-08-09 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "R",
      "Quarto snippets"
    ]
  },
  {
    "objectID": "Posts/2023-11-29_functions_in_environment/functions_in_environment.html",
    "href": "Posts/2023-11-29_functions_in_environment/functions_in_environment.html",
    "title": "Source functions from an environment",
    "section": "",
    "text": "Instead of throwing everything in .GlobalEnv, you can create your own environments for particular uses. Analyses with lots of steps in a particular order lend themselves to a functional paradigm, but it gets messy throwing everything step by step in a single notebook.\nDefining functions on the fly is quick and easy, but for tasks I’m likely to repeat in the future, or for operations that require some research for accuracy and wouldn’t be quick to rewrite, I tend to write them in their own .R files, store them all in a folder, and source them at the beginning of a notebook. There’s also the benefit of less visual clutter, so you can pack these files with a slew of validation operations and commentary. I like to name each .R file with the name of a singular function that is defined within, and it’s important to write it such that there are no side effects—that way I can just drop relevant functions into any workspace needed.\nThis workflow is sort of a half-baked implementation of a personal R package. But with functions that might be improved and evolved constantly, and avoiding unnecessary complexity, I think this does the trick. For clarity, I also like the use of mk$ to prefix grabbing functions from the mk custom environment (see below). It helps to quickly parse where I’m using functions from packages rather than user-defined functions.\n\ndata &lt;- c(1, 2, 3)\n\nTypical workflow:\n\nmy_func &lt;- function(x) {\n    x^2\n}\n\nmy_func(data)\n\n[1] 1 4 9\n\n\nSource a function to the global environment\n\nsource(\"my_dir/my_func_2.R\")\n\nmy_func_2(data)\n\n[1] 1 4 9\n\n\nSource a function to a custom environment\n\nmk &lt;- new.env()\nsys.source(\"R/my_func_3.R\", envir = mk)\n\n# Since `my_func_3` does not exist in the global environment\n# this will return an error\ntry(my_func_3(data))\n\n# Works when you specify the environment\nmk$my_func_3(data)\n\nError in my_func_3(data) : could not find function \"my_func_3\"\n[1] 1 4 9\n\n\nSource many .R files to a custom environment\nAfter dropping a bunch of relevant functions in a workspace for an analysis, I’ll usually throw this block towards the top of the notebook.\n\n# Source functions, helpers\nmk &lt;- new.env()\nsource_files &lt;- list.files(\"R\", recursive = TRUE, full.names = TRUE)\ninvisible(lapply(as.list(source_files), \\(x) sys.source(x, envir = mk)))\n\nShow functions in Quarto output\nFor finished analyses, I like documentation of the exact functions used, but this can be tough for a bunch of external functions sourced. I use this odd chunk of code to show each function in collapsible sections at the bottom of the rendered Quarto html document.\n#| echo: false\n#| results: asis\nfor (i in seq_along(source_files)) {\n    func_name &lt;- stringr::str_replace(source_files[i], \"^.+/(.+?)\\\\.R$\", \"\\\\1\")\n    lines &lt;- readr::read_lines(source_files[i])\n    cat(paste0('&lt;details style=\"margin-bottom:10px\"&gt;', \"\\n\"))\n    cat(paste0('&lt;summary style=\"color:black;\"&gt;', \"\\n\"))\n    cat(paste0(func_name, \"\\n\"))\n    cat(paste0('&lt;/summary&gt;', \"\\n\"))\n    cat(paste(paste(rep(\"`\", 3), collapse = \"\"), \" r\\n\"))\n    cat(lines, sep = \"\\n\")\n    cat(\"\\n\")\n    cat(paste(rep(\"`\", 3), collapse = \"\"))\n    cat(\"\\n\")\n    cat(paste0('&lt;/details&gt;', \"\\n\\n\"))\n}\nrm(i)\nFunctions available in the mk environment\n\n\n\nmy_func_3\n\nmy_func_3 &lt;- function(x) {\n    x^2\n}\n\n\n\n\n\nSession info\n\n\n\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.3 (2023-03-15)\n os       macOS 14.1.2\n system   aarch64, darwin20\n ui       X11\n language (EN)\n collate  en_US.UTF-8\n ctype    en_US.UTF-8\n tz       America/Denver\n date     2023-12-06\n pandoc   3.1.8 @ /opt/homebrew/bin/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n bit           4.0.5   2022-11-15 [1] CRAN (R 4.2.0)\n bit64         4.0.5   2020-08-30 [1] CRAN (R 4.2.0)\n cli           3.6.1   2023-03-23 [1] CRAN (R 4.2.0)\n crayon        1.5.2   2022-09-29 [1] CRAN (R 4.2.0)\n digest        0.6.33  2023-07-07 [1] CRAN (R 4.2.0)\n evaluate      0.22    2023-09-29 [1] CRAN (R 4.2.3)\n fansi         1.0.5   2023-10-08 [1] CRAN (R 4.2.0)\n fastmap       1.1.1   2023-02-24 [1] CRAN (R 4.2.0)\n glue          1.6.2   2022-02-24 [1] CRAN (R 4.2.0)\n hms           1.1.3   2023-03-21 [1] CRAN (R 4.2.0)\n htmltools     0.5.6.1 2023-10-06 [1] CRAN (R 4.2.0)\n htmlwidgets   1.6.2   2023-03-17 [1] CRAN (R 4.2.0)\n jsonlite      1.8.7   2023-06-29 [1] CRAN (R 4.2.0)\n knitr         1.44    2023-09-11 [1] CRAN (R 4.2.0)\n lifecycle     1.0.3   2022-10-07 [1] CRAN (R 4.2.0)\n magrittr      2.0.3   2022-03-30 [1] CRAN (R 4.2.0)\n pillar        1.9.0   2023-03-22 [1] CRAN (R 4.2.0)\n pkgconfig     2.0.3   2019-09-22 [1] CRAN (R 4.2.0)\n R6            2.5.1   2021-08-19 [1] CRAN (R 4.2.0)\n readr         2.1.4   2023-02-10 [1] CRAN (R 4.2.0)\n rlang         1.1.1   2023-04-28 [1] CRAN (R 4.2.0)\n rmarkdown     2.25    2023-09-18 [1] CRAN (R 4.2.0)\n rstudioapi    0.15.0  2023-07-07 [1] CRAN (R 4.2.0)\n sessioninfo   1.2.2   2021-12-06 [1] CRAN (R 4.2.0)\n stringi       1.7.12  2023-01-11 [1] CRAN (R 4.2.0)\n stringr       1.5.0   2022-12-02 [1] CRAN (R 4.2.0)\n tibble        3.2.1   2023-03-20 [1] CRAN (R 4.2.0)\n tidyselect    1.2.0   2022-10-10 [1] CRAN (R 4.2.0)\n tzdb          0.4.0   2023-05-12 [1] CRAN (R 4.2.0)\n utf8          1.2.4   2023-10-22 [1] CRAN (R 4.2.0)\n vctrs         0.6.4   2023-10-12 [1] CRAN (R 4.2.0)\n vroom         1.6.4   2023-10-02 [1] CRAN (R 4.2.0)\n xfun          0.40    2023-08-09 [1] CRAN (R 4.2.0)\n yaml          2.3.7   2023-01-23 [1] CRAN (R 4.2.0)\n\n [1] /Library/Frameworks/R.framework/Versions/4.2-arm64/Resources/library\n\n──────────────────────────────────────────────────────────────────────────────",
    "crumbs": [
      "R",
      "Source functions from an environment"
    ]
  },
  {
    "objectID": "Posts/2023-12-03_git_notes/git_notes.html#git-config",
    "href": "Posts/2023-12-03_git_notes/git_notes.html#git-config",
    "title": "Git Notes",
    "section": "Git config",
    "text": "Git config\n\n[path]/etc/gitconfig\n\nSystem-wide git config\nUse git config --system\n\n~/.gitconfig or ~/.config/git/config\n\nUser git config\nUse git config --global\n\n.git/config\n\nConfig just for the repo\nUse git config or git config --local\n\n\nLocal options override global options override system options\nList all your options with git config --list --show-origin. This also conveniently shows the files where the options are stored.\n\nSet one-time options\nIdentity options\ngit config --global user.name &lt;e.g., Github username&gt;\ngit config --global user.email &lt;e.g., Github email&gt;\nDefault editor\ngit config --global core.editor nvim\nDefault branch name\ngit config --global init.defaultBranch main\n\n\nHelp pages\ngit help &lt;verb&gt;\ngit &lt;verb&gt; --help\nman git-&lt;verb&gt;",
    "crumbs": [
      "Misc",
      "Git Notes"
    ]
  },
  {
    "objectID": "Posts/2023-12-03_git_notes/git_notes.html#creating-a-new-repo",
    "href": "Posts/2023-12-03_git_notes/git_notes.html#creating-a-new-repo",
    "title": "Git Notes",
    "section": "Creating a new repo",
    "text": "Creating a new repo\n\nTurn a local directory into a repo\nInit\ncd &lt;directory&gt;\ngit init\nAdd some files (i.e., stage some files for committing)\ngit add -A    # add all files\ngit add .     # add all files (if you're at root)\ngit add *.qmd # add with a glob\nMake an initial commit\ngit commit -m \"initial commmit\"\n\n\nClone an existing repo\n# Clone into the current directory\ngit clone &lt;url/path&gt;\n\n# Clone into the current directory with specific name\ngit clone &lt;url/path&gt; &lt;name_of_dir&gt;",
    "crumbs": [
      "Misc",
      "Git Notes"
    ]
  },
  {
    "objectID": "Posts/2023-12-03_git_notes/git_notes.html#commands",
    "href": "Posts/2023-12-03_git_notes/git_notes.html#commands",
    "title": "Git Notes",
    "section": "Commands",
    "text": "Commands\n\n\n\n\n\n\n\ngit help\nHelp for a command\n\n\ngit status\nCheck status of repo\n\n\ngit status -sgit status --short\nCheck status (short)\n\n\ngit add\nAdd files to staging\n\n\ngit diff\nShow changes in unstaged\n\n\ngit diff -stagedgit diff -cached\nShow changes in staged\n\n\ngit difftoolgit difftool --tool-help\nUse software to show diffs\n\n\ngit log\nShow commit history\n\n\ngit log --pretty=oneline\nCompact commit history with just messages\n\n\ngit log --pretty=oneline --graph\nAlso shows branch and merge history\n\n\ngit log --since=2.weeks\nShow log only in last two weeks\n\n\n\n\n\n\n\n\n\n\n\ngit commit\nCommit staged and open editor for commit message\n\n\ngit commit -m &lt;message&gt;\nCommit staged and add message inline\n\n\ngit commit -v\nAdd diff into the commit message editor\n\n\ngit commit -a \nAutomatically stage all files that were already tracked before committing (I assume this won’t stage files that were previously untracked)",
    "crumbs": [
      "Misc",
      "Git Notes"
    ]
  },
  {
    "objectID": "Posts/2023-12-03_git_notes/git_notes.html#git-add",
    "href": "Posts/2023-12-03_git_notes/git_notes.html#git-add",
    "title": "Git Notes",
    "section": "git add",
    "text": "git add\n\nWhen you git add &lt;file.ext&gt;, THAT version will be added for staging, but further modifications will not be staged. Run git add again to stage any subsequent modifications to the file.",
    "crumbs": [
      "Misc",
      "Git Notes"
    ]
  },
  {
    "objectID": "Posts/2023-12-03_git_notes/git_notes.html#gitignore",
    "href": "Posts/2023-12-03_git_notes/git_notes.html#gitignore",
    "title": "Git Notes",
    "section": ".gitignore",
    "text": ".gitignore\nUse file .gitignore\n\nBlank lines or lines starting with # are ignored\nPrepending lines with / avoids recursion\nAppending lines with / indicates directories\n\n\n\n\n\n\n\n\n*.[oa]\nIgnore files ending in .o or .a\n\n\n*~\nIgnore files ending in ~ (many temporary files)\n\n\n!*.txt\nIgnore files NOT ending with .txt\n\n\ntemp*!temp1.text\nDo not track files starting with tempBut do specifically track this file\n\n\n/TODO.txt\nIgnore TODO.txt in current directory, but not subdir/TODO.txt\n\n\nlib/\nIgnore ANY directories named lib\n\n\nassets/**/*.png\nIgnore .png files in assets or any of its subdirectories\n\n\n\n\n.gitignore examples: GitHub - github/gitignore: A collection of useful .gitignore templates\nMultiple .gitignore files are possible, see man gitignore",
    "crumbs": [
      "Misc",
      "Git Notes"
    ]
  },
  {
    "objectID": "Posts/2023-12-03_git_notes/git_notes.html#removing-files-git-rm",
    "href": "Posts/2023-12-03_git_notes/git_notes.html#removing-files-git-rm",
    "title": "Git Notes",
    "section": "Removing files (git rm)",
    "text": "Removing files (git rm)\n\nOption 1: Using git rm &lt;file&gt; will remove the file and also add it to the “Changes to be committed” (i.e., the removal added to the staging area)\nOption 2: If you remove a tracked file manually, it will show as as “Changes not staged for commit”. Deleting in VSCode will allow you to stage this deletion in the GUI if you didn’t use git rm when deleting.\n\nIf a file has been modified or added to the stage area, use git rm -f to force the deletion. (Safety feature to avoid deleting a modified/staged file).\n\nUnstage a file (git rm –cached)\ngit rm --cached &lt;file&gt; = KEEP the file, but remove it from staging area (e.g., forgot to add it to .gitignore but you staged it)\n\n\nRename a file\nOption 1\ngit mv file_old file_new\nOption 2\nmv file_old file_new\ngit rm file_old\ngit add file_new\nGit will implicitly detect the rename anyway.\n\n\n\n\n\n\nNote\n\n\n\nA rename only seems to show a rename in git status.\nA rename and a modification seems to show a deleted file and then a new file? Not sure how this affects the history or what can be gleamed. E.g. in VSCode GUI will it show the rename and previous history of a file? Seems like it might be safer to not commit a rename and a modification in the same commit for important files",
    "crumbs": [
      "Misc",
      "Git Notes"
    ]
  },
  {
    "objectID": "Posts/2023-12-03_git_notes/git_notes.html#undoing",
    "href": "Posts/2023-12-03_git_notes/git_notes.html#undoing",
    "title": "Git Notes",
    "section": "Undoing",
    "text": "Undoing\n\nUndo commit (git commit –amend)\nUse when you’ve already made a commit and want to make a change (e.g., change the commit message, add a file you forgot, etc.). This will entirely change the commit.\nE.g.,\ngit commit -m \"message\"\ngit add &lt;new_file&gt;\n\n# One of:\ngit commit --amend # I think it keeps old commit message?\ngit commit --amend -m \"message_new\"\n\n\nUnstage a file (git reset)\n# Both in staging area\ngit add file1\ngit add file2\n\n# Unstage file2\ngit reset HEAD file2\nUnstage all staged files (keeps any modifications in the working directory). This is a “mixed reset”.\n# equivalent\ngit reset HEAD\ngit reset\n\n\ngit reset\n(Section to be updated in later chapters)\nTo see where HEAD is pointing, use git log, e.g,\ngit log\ngit log -n 1\ngit log --pretty=oneline --graph\n\nCommands\n\n\n\n\n\n\n\ngit resetgit reset HEAD\nUnstage staged file for the commit at HEAD, keep any changes in the working directory\n\n\ngit reset --soft &lt;commit&gt;\nReset the HEAD to a specific commit, but leave any changes in working directory\n\n\ngit reset &lt;commit&gt;\nReset HEAD to specific commit, leave any changes in working directory, unstage changes\n\n\ngit reset --hard &lt;commit&gt;\nReset HEAD to specific commit, unstage changes, discards all changes in working directory\n\n\n\n\n\n\nUnmodify a file (git checkout –)\nFor untracked but modified files, discard changes (irreversibly) with:\ngit checkout -- &lt;file&gt;\n\n\nUndoing with git restore (easier)\ngit restore introduced with git v.2.23.0\n\n\n\n\n\n\n\ngit restore --staged &lt;file&gt;\nUnstage a file\n\n\ngit restore --staged .\nUnstage all files under current working directory\n\n\ngit restore &lt;file&gt;\nDiscard changes to a modified file (irreversibly)\n\n\ngit restore . \nDiscard changes to all modified files(?) (irreversibly)",
    "crumbs": [
      "Misc",
      "Git Notes"
    ]
  },
  {
    "objectID": "Posts/2023-12-03_git_notes/git_notes.html#remotes",
    "href": "Posts/2023-12-03_git_notes/git_notes.html#remotes",
    "title": "Git Notes",
    "section": "Remotes",
    "text": "Remotes\n\nGet info on remotes\n\n\n\n\n\n\n\ngit remote \nShow shortnames of remotes\n\n\ngit remote -v\nShow shortnames + URLs for each remote\n\n\ngit remote add &lt;shortname&gt; &lt;url&gt;\nAdd new remote repository\n\n\n\nWhen you git clone a repo, this will automatically add that repo to your remotes under the shortname origin\n\n\nFetch/pull from remotes\ngit fetch &lt;shortname&gt;\n\nFetch all info from a remote, e.g. &lt;shortname&gt;/main or &lt;shortname&gt;/&lt;branch_name&gt; will be available to merge into another branch, checkout to a local branch, etc.\n\ngit fetch origin\n\nFetch any new work from origin that has been pushed to the server since you last cloned or last fetched\nThis will only download the data to the local repo, it does not automatically merge it with any work you’ve done or modify your current work. You must merge it into your work.\n\nIf current branch “tracks” a remote branch, use git pull to automatically fetch the remote branch and then merge it into your current branch\ngit clone automatically sets your local main/master branch to track the remote main/master branch\ngit pull “generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you’re currently working on”\n\n\nQuote from book:\n\nFrom Git version 2.27 onward, git pull will give a warning if the pull.rebase variable is not set. Git will keep warning you until you set the variable.\nIf you want the default behavior of Git (fast-forward if possible, else create a merge commit): git config --global pull.rebase \"false\"\nIf you want to rebase when pulling: git config --global pull.rebase \"true”\n\n\n\nPush to remote (git push)\ngit push &lt;remote&gt; &lt;branch&gt;\ngit push &lt;origin&gt; &lt;my_branch&gt;\n\nPush your branch with shortname my_branch to the remote with the shortname origin\n\ngit push origin main\n\nPush your main branch to the remote shortnamed “origin”\nIf two people have cloned the repo and then push upstream, the second push would be rejected. The second person would have to fetch their work first, incorporate it, and then push.\n\n(TBC… work in progress)",
    "crumbs": [
      "Misc",
      "Git Notes"
    ]
  }
]